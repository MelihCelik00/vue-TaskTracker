{"ast":null,"code":"import Tasks from '../components/Tasks';\nimport AddTask from '../components/AddTask';\nexport default {\n  name: 'Home',\n  props: {\n    showAddTask: Boolean\n  },\n  components: {\n    Tasks,\n    AddTask\n  },\n\n  data() {\n    return {\n      tasks: []\n    };\n  },\n\n  methods: {\n    async addTask(task) {\n      const res = await fetch('api/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(task)\n      });\n      const data = await res.json();\n      this.tasks = [...this.tasks, data];\n    },\n\n    async deleteTask(id) {\n      if (confirm('Are you sure?')) {\n        const res = await fetch(`api/tasks/${id}`, {\n          method: 'DELETE'\n        });\n        res.status === 200 ? this.tasks = this.tasks.filter(task => task.id !== id) : alert('Error deleting task');\n        this.tasks = this.tasks.filter(task => task.id !== id);\n      }\n    },\n\n    async toggleReminder(id) {\n      const taskToToggle = await this.fetchTask(id);\n      const updatedTask = { ...taskToToggle,\n        reminder: !taskToToggle.reminder\n      };\n      const res = await fetch(`api/tasks/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(updatedTask)\n      });\n      const data = await res.json();\n      this.tasks = this.tasks.map(task => task.id === id ? { ...task,\n        reminder: data.reminder\n      } : task);\n    },\n\n    async fetchTasks() {\n      const res = await fetch('api/tasks');\n      const data = await res.json();\n      return data;\n    },\n\n    async fetchTask(id) {\n      const res = await fetch(`api/tasks/${id}`);\n      const data = await res.json();\n      return data;\n    }\n\n  },\n\n  async created() {\n    this.tasks = await this.fetchTasks();\n  }\n\n};","map":{"version":3,"mappings":"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","names":["Tasks","AddTask","name","props","showAddTask","Boolean","components","data","tasks","methods","addTask","task","res","fetch","method","headers","body","JSON","stringify","json","deleteTask","id","confirm","status","filter","alert","toggleReminder","taskToToggle","fetchTask","updatedTask","reminder","map","fetchTasks","created"],"sourceRoot":"","sources":["/Users/melihsafacelik/vue-beraberbarin/src/views/Home.vue"],"sourcesContent":["<template>\n    <AddTask v-show=\"showAddTask\" @add-task=\"addTask\" />\n  <Tasks\n    @toggle-reminder=\"toggleReminder\"\n    @delete-task=\"deleteTask\"\n    :tasks=\"tasks\"\n  />\n</template>\n\n<script>\nimport Tasks from '../components/Tasks'\nimport AddTask from '../components/AddTask'\n\nexport default {\n    name: 'Home',\n    props:{\n        showAddTask: Boolean,\n    },\n    components:{\n        Tasks,\n        AddTask,\n    },\n    data(){\n        return {\n            tasks: [],\n        }\n    },\n    methods: {\n        async addTask(task){\n\t\tconst res = await fetch('api/tasks', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-type' : 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(task),\n\t\t})\n\n\t\tconst data = await res.json()\n\t\tthis.tasks = [...this.tasks, data]\n        },\n        async deleteTask(id){\n            if(confirm('Are you sure?')){\n                const res = await fetch(`api/tasks/${id}`, {\n                    method: 'DELETE',\n                })\n\n                res.status === 200 ? (this.tasks = this.tasks.filter((task) => task.id !== id)) : alert('Error deleting task')\n\n                this.tasks = this.tasks.filter((task)=> task.id !== id)\n            }\n        },\n        async toggleReminder(id){\n            const taskToToggle = await this.fetchTask(id)\n            const updatedTask = {...taskToToggle, reminder: !taskToToggle.reminder}\n\n            const res = await fetch(`api/tasks/${id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body: JSON.stringify(updatedTask)\n            })\n\n            const data = await res.json()\n\n            this.tasks = this.tasks.map((task) => task.id === id ? {...task, reminder: data.reminder} : task)\n        },\n        async fetchTasks() {\n            const res = await fetch('api/tasks');\n            const data = await res.json();\n            return data;\n        },\n        async fetchTask(id) {\n            const res = await fetch(`api/tasks/${id}`)\n            const data = await res.json();\n            return data;\n        }\n        },\n        async created() {\n            this.tasks = await this.fetchTasks();\n        }\n\n    }\n\n\n\n</script>"]},"metadata":{},"sourceType":"module"}