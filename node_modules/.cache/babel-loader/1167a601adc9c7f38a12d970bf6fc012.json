{"ast":null,"code":"import Header from './components/Header';\nimport Footer from './components/Footer';\nexport default {\n  name: 'App',\n  components: {\n    Header,\n    Footer\n  },\n\n  data() {\n    return {\n      tasks: [],\n      showAddTask: false\n    };\n  },\n\n  methods: {\n    toggleAddTask() {\n      this.showAddTask = !this.showAddTask;\n    },\n\n    async addTask(task) {\n      const res = await fetch('api/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(task)\n      });\n      const data = await res.json();\n      this.tasks = [...this.tasks, data];\n    },\n\n    async deleteTask(id) {\n      if (confirm('Are you sure?')) {\n        const res = await fetch(`api/tasks/${id}`, {\n          method: 'DELETE'\n        });\n        res.status === 200 ? this.tasks = this.tasks.filter(task => task.id !== id) : alert('Error deleting task');\n        this.tasks = this.tasks.filter(task => task.id !== id);\n      }\n    },\n\n    async toggleReminder(id) {\n      const taskToToggle = await this.fetchTask(id);\n      const updatedTask = { ...taskToToggle,\n        reminder: !taskToToggle.reminder\n      };\n      const res = await fetch(`api/tasks/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(updatedTask)\n      });\n      const data = await res.json();\n      this.tasks = this.tasks.map(task => task.id === id ? { ...task,\n        reminder: data.reminder\n      } : task);\n    },\n\n    async fetchTasks() {\n      const res = await fetch('api/tasks');\n      const data = await res.json();\n      return data;\n    },\n\n    async fetchTask(id) {\n      const res = await fetch(`api/tasks/${id}`);\n      const data = await res.json();\n      return data;\n    }\n\n  },\n\n  async created() {\n    this.tasks = await this.fetchTasks();\n  }\n\n};","map":{"version":3,"mappings":"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","names":["Header","Footer","name","components","data","tasks","showAddTask","methods","toggleAddTask","addTask","task","res","fetch","method","headers","body","JSON","stringify","json","deleteTask","id","confirm","status","filter","alert","toggleReminder","taskToToggle","fetchTask","updatedTask","reminder","map","fetchTasks","created"],"sourceRoot":"","sources":["/Users/melihsafacelik/vue-beraberbarin/src/App.vue"],"sourcesContent":["<template>\n\t<div class=\"container\">\n\t\t<Header @toggle-add-task=\"toggleAddTask\" title=\"Task Tracker\" :showAddTask=\"showAddTask\" />\n\t\t\n\t\t<router-view></router-view>\n\t\t<Footer />\n\t</div>\n  \n</template>\n\n<script>\nimport Header from './components/Header'\nimport Footer from './components/Footer'\n\nexport default {\n  name: 'App',\n  components: {\n    Header,\n\tFooter,\n  },\n  data() {\n\treturn {\n\t\ttasks: [],\n\t\tshowAddTask: false\n\t}\n  },\n  methods:{\n\ttoggleAddTask(){\n\t\tthis.showAddTask = !this.showAddTask;\n\t},\n\tasync addTask(task){\n\t\tconst res = await fetch('api/tasks', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-type' : 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(task),\n\t\t})\n\n\t\tconst data = await res.json()\n\t\tthis.tasks = [...this.tasks, data]\n\t},\n\tasync deleteTask(id){\n\t\tif(confirm('Are you sure?')){\n\t\t\tconst res = await fetch(`api/tasks/${id}`, {\n\t\t\t\tmethod: 'DELETE',\n\t\t\t})\n\n\t\t\tres.status === 200 ? (this.tasks = this.tasks.filter((task) => task.id !== id)) : alert('Error deleting task')\n\n\t\t\tthis.tasks = this.tasks.filter((task)=> task.id !== id)\n\t\t}\n\t},\n\tasync toggleReminder(id){\n\t\tconst taskToToggle = await this.fetchTask(id)\n\t\tconst updatedTask = {...taskToToggle, reminder: !taskToToggle.reminder}\n\n\t\tconst res = await fetch(`api/tasks/${id}`, {\n\t\t\tmethod: 'PUT',\n\t\t\theaders: {\n\t\t\t\t'Content-type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify(updatedTask)\n\t\t})\n\n\t\tconst data = await res.json()\n\n\t\tthis.tasks = this.tasks.map((task) => task.id === id ? {...task, reminder: data.reminder} : task)\n\t},\n\tasync fetchTasks() {\n\t\tconst res = await fetch('api/tasks');\n\t\tconst data = await res.json();\n\t\treturn data;\n\t},\n\tasync fetchTask(id) {\n\t\tconst res = await fetch(`api/tasks/${id}`)\n\t\tconst data = await res.json();\n\t\treturn data;\n\t}\n  },\n\tasync created() {\n\t\tthis.tasks = await this.fetchTasks();\n  }\n}\n</script>\n\n<style>\n@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400&display=swap');\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\nbody {\n  font-family: 'Poppins', sans-serif;\n}\n.container {\n  max-width: 500px;\n  margin: 30px auto;\n  overflow: auto;\n  min-height: 300px;\n  border: 1px solid steelblue;\n  padding: 30px;\n  border-radius: 5px;\n}\n.btn {\n  display: inline-block;\n  background: #000;\n  color: #fff;\n  border: none;\n  padding: 10px 20px;\n  margin: 5px;\n  border-radius: 5px;\n  cursor: pointer;\n  text-decoration: none;\n  font-size: 15px;\n  font-family: inherit;\n}\n.btn:focus {\n  outline: none;\n}\n.btn:active {\n  transform: scale(0.98);\n}\n.btn-block {\n  display: block;\n  width: 100%;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}